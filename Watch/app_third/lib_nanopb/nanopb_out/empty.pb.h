/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_EMPTY_PB_H_INCLUDED
#define PB_EMPTY_PB_H_INCLUDED
#include <pb.h>
#include "nanopb/nanopb.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _EmptyEnum {
    EmptyEnum_EMPTY_DEFAULT = 0,
    EmptyEnum_EMPTY_NULL = 1,
    EmptyEnum_EMPTY_NONE = 2
} EmptyEnum;

/* Struct definitions */
typedef struct _EmptyMessage {
    pb_callback_t name;
    bool has_data32;
    uint32_t data32;
    pb_callback_t distributor;
    bool has_status;
    EmptyEnum status;
} EmptyMessage;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _EmptyEnum_MIN EmptyEnum_EMPTY_DEFAULT
#define _EmptyEnum_MAX EmptyEnum_EMPTY_NONE
#define _EmptyEnum_ARRAYSIZE ((EmptyEnum)(EmptyEnum_EMPTY_NONE+1))

#define EmptyMessage_status_ENUMTYPE EmptyEnum


/* Initializer values for message structs */
#define EmptyMessage_init_default                {{{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, _EmptyEnum_MIN}
#define EmptyMessage_init_zero                   {{{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, _EmptyEnum_MIN}

/* Field tags (for use in manual encoding/decoding) */
#define EmptyMessage_name_tag                    1
#define EmptyMessage_data32_tag                  2
#define EmptyMessage_distributor_tag             3
#define EmptyMessage_status_tag                  4

/* Struct field encoding specification for nanopb */
#define EmptyMessage_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, UINT32,   data32,            2) \
X(a, CALLBACK, REQUIRED, STRING,   distributor,       3) \
X(a, STATIC,   OPTIONAL, UENUM,    status,            4)
#define EmptyMessage_CALLBACK pb_default_field_callback
#define EmptyMessage_DEFAULT NULL

extern const pb_msgdesc_t EmptyMessage_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define EmptyMessage_fields &EmptyMessage_msg

/* Maximum encoded size of messages (where known) */
/* EmptyMessage_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
