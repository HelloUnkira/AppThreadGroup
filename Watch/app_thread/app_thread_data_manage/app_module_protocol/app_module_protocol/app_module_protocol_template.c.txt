/*一份协议体响应结构模板
 */

#define APP_SYS_LOG_LOCAL_STATUS     1
#define APP_SYS_LOG_LOCAL_LEVEL      2   /* 0:DEBUG,1:INFO,2:WARN,3:ERROR,4:NONE */

#include "app_std_lib.h"
#include "app_os_adaptor.h"
#include "app_sys_log.h"
#include "app_sys_pipe.h"
#include "app_thread_master.h"
#include "app_thread_protocol.h"

/*@brief     解析已经接收的协议包
 *@param[in] package 协议包
 */
void app_module_protocol_rx(app_module_protocol_package_t *package)
{
	uint32_t size = package->size;  /* 此处为data的有效载荷 */
	uint8_t *data = package->data;
	switch(package->event) {
	case 0x01: {
        /* 处理data */
        /* 注意:如果双方约定了多包协议 */
        /*      则需要本地自行组包 */
        /*      有些包内存不足,需要本地转储 */
		break;
	}
    default:
        break;
	}
}

/*@brief     填充准备发送的协议包
 *@param[in] package 协议包
 */
void app_module_protocol_tx(app_module_protocol_package_t *package)
{
	uint32_t size = package->pkg.size;  /* 此处为data的最大载荷 */
	uint8_t *data = package->pkg.data;
	switch(package->pkg.event) {
	case 0x02: {
        /* 填充data */
        /* 注意:如果双方约定了多包协议 */
        /*      则需要本地自行拆包 */
        /*      有些包内存不足,需要本地转储 */
		break;
	}
    default:
        break;
	}
}
